/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import dtos.ProductoDTO;
import java.util.List;
import gestores.GestorProductos;
import excepciones.PersistenciaException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pojos.Producto;

/**
 * Frame para mostrar los productos
 * @author Fran
 */
public class productosFrame extends javax.swing.JFrame {

    GestorProductos gestorProductos = new GestorProductos();

    /**
     * Creates new form productosFrame
     */
    public productosFrame() {
        initComponents();
        try {

            List<ProductoDTO> productos = gestorProductos.consultarTodos();
            productosFrame.ProductosTableModel tableModel = new productosFrame.ProductosTableModel(productos);
            tablaProductos.setModel(tableModel);
        } catch (PersistenciaException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los productos: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        botonSalir = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonModificar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botonFiltrarFechas = new javax.swing.JButton();
        fieldFechaDesde = new javax.swing.JTextField();
        fieldFechaHasta = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldNombre = new javax.swing.JTextField();
        botonFIltrarNombre = new javax.swing.JButton();
        botonRestablecer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 153, 51));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Productos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(354, 354, 354)
                                .addComponent(jLabel4)
                                .addContainerGap(415, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel4)
                                .addContainerGap(32, Short.MAX_VALUE)));

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 940, 100);

        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });
        getContentPane().add(botonSalir);
        botonSalir.setBounds(150, 490, 72, 23);

        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(botonEliminar);
        botonEliminar.setBounds(520, 490, 90, 23);

        botonModificar.setText("Modificar");
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });
        getContentPane().add(botonModificar);
        botonModificar.setBounds(280, 490, 90, 23);

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {

                }));
        jScrollPane2.setViewportView(tablaProductos);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(0, 160, 680, 240);

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Desde:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Hasta:");

        botonFiltrarFechas.setText("Filtrar por Fechas");
        botonFiltrarFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFiltrarFechasActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Nombre:");

        botonFIltrarNombre.setText("Buscar por Nombre");
        botonFIltrarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFIltrarNombreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(43, 43, 43)
                                                .addGroup(jPanel2Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jLabel1)))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(23, 23, 23)
                                                .addGroup(jPanel2Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3)
                                                        .addComponent(fieldNombre,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 158,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(botonFIltrarNombre))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 32, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(botonFiltrarFechas)
                                        .addComponent(fieldFechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 158,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(fieldFechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 158,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fieldFechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel2)
                                .addGap(10, 10, 10)
                                .addComponent(fieldFechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonFiltrarFechas)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botonFIltrarNombre)
                                .addContainerGap(38, Short.MAX_VALUE)));

        getContentPane().add(jPanel2);
        jPanel2.setBounds(690, 160, 210, 370);

        botonRestablecer.setText("Restablecer");
        botonRestablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRestablecerActionPerformed(evt);
            }
        });
        getContentPane().add(botonRestablecer);
        botonRestablecer.setBounds(400, 490, 100, 23);

        setBounds(0, 0, 959, 597);
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonSalirActionPerformed
        dispose();
    }// GEN-LAST:event_botonSalirActionPerformed

    /**
     * Valida que la fecha tenga el formato correcto
     * 
     * @param fecha
     * @return boolean true si la fecha tiene el formato correcto, false en caso
     *         contrario
     */
    private boolean validarFormatoFecha(String fecha) {
        // Expresión regular para validar el formato yyyy-MM-dd
        String regex = "^\\d{4}-\\d{2}-\\d{2}$";
        return fecha.matches(regex);
    }

    /**
     * Valida que los valores de la fecha sean válidos
     * 
     * @param fecha
     * @return boolean true si los valores de la fecha son válidos, false en caso
     *         contrario
     */
    private boolean validarValoresFecha(String fecha) {
        // Obtener los componentes de la fecha
        String[] componentes = fecha.split("-");
        int anio = Integer.parseInt(componentes[0]);
        int mes = Integer.parseInt(componentes[1]);
        int dia = Integer.parseInt(componentes[2]);

        // Validar que los valores sean válidos
        if (anio < 0 || mes < 1 || mes > 12 || dia < 1 || dia > 31) {
            return false;
        }

        return true;
    }

    /**
     * Muestra los productos en la tabla
     * 
     * @param productos
     */
    private void mostrarProductosEnTabla(List<ProductoDTO> productos) {
        // Limpiar la tabla
        DefaultTableModel model = (DefaultTableModel) tablaProductos.getModel();
        model.setRowCount(0);

        // Llenar la tabla con los productos
        for (ProductoDTO producto : productos) {
            Object[] row = {
                    producto.getNombre(),
                    producto.getCodigoInterno(),
                    producto.getPrecio(),
                    producto.getFechaRegistro()
            };
            model.addRow(row);
        }
    }

    /**
     * Filtra los productos por rango de fechas
     * 
     * @param evt
     */
    private void botonFiltrarFechasActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonFiltrarFechasActionPerformed
        GestorProductos gp = new GestorProductos();
        // Obtener las fechas ingresadas
        String fechaDesdeStr = fieldFechaDesde.getText();
        String fechaHastaStr = fieldFechaHasta.getText();

        // Validar el formato y los valores de las fechas
        if (!validarFormatoFecha(fechaDesdeStr) || !validarFormatoFecha(fechaHastaStr)) {
            JOptionPane.showMessageDialog(this, "Ingrese fechas válidas en formato yyyy-MM-dd.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convertir las fechas a un formato más simple
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date fechaInicio = sdf.parse(fechaDesdeStr);
            Date fechaFin = sdf.parse(fechaHastaStr);

            // Llamar al método para obtener los productos filtrados por fechas
            List<ProductoDTO> productosFiltrados = gp.consultarPorRangoFechas(fechaInicio, fechaFin);

            // Mostrar los productos filtrados en la tabla
            mostrarProductosEnTabla(productosFiltrados);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Error al parsear las fechas.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (PersistenciaException ex) {
            Logger.getLogger(principalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_botonFiltrarFechasActionPerformed

    /**
     * Elimina un producto
     * @param evt 
     */
    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonEliminarActionPerformed
        // Obtener el índice de la fila seleccionada en la tabla
        int selectedRow = tablaProductos.getSelectedRow();

        // Verificar si se ha seleccionado una fila
        if (selectedRow != -1) {
            // Obtener el código interno del producto en la fila seleccionada
            String codigoInterno = (String) tablaProductos.getValueAt(selectedRow, 1);

            // Llamar al método para eliminar el producto
            try {
                GestorProductos gestorProductos = new GestorProductos();
                boolean eliminado = gestorProductos.eliminar(codigoInterno);

                if (eliminado) {
                    // Actualizar la tabla para reflejar los cambios
                    DefaultTableModel model = (DefaultTableModel) tablaProductos.getModel();
                    model.removeRow(selectedRow);
                    JOptionPane.showMessageDialog(this, "Producto eliminado exitosamente.");
                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar el producto.");
                }
            } catch (PersistenciaException ex) {
                JOptionPane.showMessageDialog(this, "Error al eliminar el producto: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para eliminar.");
        }
    }// GEN-LAST:event_botonEliminarActionPerformed

    /**
     * Modifica un producto
     * @param evt
     */
    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonModificarActionPerformed
        // Obtener el índice de la fila seleccionada en la tabla
        int selectedRow = tablaProductos.getSelectedRow();

        // Verificar si se ha seleccionado una fila
        if (selectedRow != -1) {
            // Obtener el código interno del producto en la fila seleccionada
            String codigoInterno = (String) tablaProductos.getValueAt(selectedRow, 1); // Suponiendo que la columna del
                                                                                       // código interno es la segunda
                                                                                       // (índice 1)

            // Obtener el producto del gestor
            try {
                GestorProductos gestorProductos = new GestorProductos();
                Producto producto = gestorProductos.consultarPorCodigoInterno(codigoInterno);
                if (producto != null) {
                    // Mostrar el frame de modificar producto
                    modificarProductoFrame modificarFrame = new modificarProductoFrame(producto);
                    modificarFrame.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Producto no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (PersistenciaException ex) {
                JOptionPane.showMessageDialog(this, "Error al obtener el producto: " + ex.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para modificar.");
        }
    }// GEN-LAST:event_botonModificarActionPerformed

    /**
     * Filtra los productos por nombre
     * @param evt
     */
    private void botonFIltrarNombreActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonFIltrarNombreActionPerformed
        String nombre = fieldNombre.getText();
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un nombre para filtrar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            List<ProductoDTO> productosPorNombre = gestorProductos.consultarPorNombre(nombre);

            // Mostrar las ventas filtradas por nombre en la tabla
            mostrarProductosEnTabla(productosPorNombre);
        } catch (PersistenciaException ex) {
            Logger.getLogger(productosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_botonFIltrarNombreActionPerformed

    private void botonRestablecerActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonRestablecerActionPerformed
        List<ProductoDTO> productos = null;
        try {
            productos = gestorProductos.consultarTodos();
        } catch (PersistenciaException ex) {
            Logger.getLogger(productosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        mostrarProductosEnTabla(productos);
    }// GEN-LAST:event_botonRestablecerActionPerformed

    /**
     * Main
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(productosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(productosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(productosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(productosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new productosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonFIltrarNombre;
    private javax.swing.JButton botonFiltrarFechas;
    private javax.swing.JButton botonModificar;
    private javax.swing.JButton botonRestablecer;
    private javax.swing.JButton botonSalir;
    private javax.swing.JTextField fieldFechaDesde;
    private javax.swing.JTextField fieldFechaHasta;
    private javax.swing.JTextField fieldNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaProductos;

    // End of variables declaration//GEN-END:variables
    /**
     * Clase interna para el modelo de la tabla de productos
     */
    private class ProductosTableModel extends javax.swing.table.DefaultTableModel {

        private final String[] columnNames = { "Nombre", "Codigo Interno", "Precio", "Fecha Registro" };
        private final List<ProductoDTO> productos;

        public ProductosTableModel(List<ProductoDTO> productos) {
            this.productos = productos;
            setColumnIdentifiers(columnNames);
            cargarDatos();
        }

        private void cargarDatos() {
            for (ProductoDTO producto : productos) {
                Object[] rowData = {
                        producto.getNombre(),
                        producto.getCodigoInterno(),
                        producto.getPrecio(),
                        producto.getFechaRegistro()
                };
                addRow(rowData);
            }
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            // Para que las celdas no sean editables
            return false;
        }
    }
}
